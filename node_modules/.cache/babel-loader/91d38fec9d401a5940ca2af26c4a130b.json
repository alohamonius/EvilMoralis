{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/git-public/evils-moralis/src/components/Minter/minter.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { ethers } from 'ethers';\nimport Web3Modal from 'web3modal';\nimport { Alert } from 'antd';\nimport { MINT_CONTRACT } from '../../../config.js';\nimport TokenMinter from '../../../artifacts/contracts/TokenMinter.sol/TokenMinter.json';\nimport { useMoralis } from 'react-moralis';\nimport { notification } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Minter = () => {\n  _s();\n\n  const {\n    user\n  } = useMoralis();\n  React.useEffect(() => {\n    let timer1 = setInterval(async () => {\n      const signer = await Web3Service.getMySigner();\n      let contract = new ethers.Contract(MINT_CONTRACT, TokenMinter.abi, signer);\n      console.log(`total supply ${await contract.totalSupply()}`);\n    }, 1 * 1000);\n    return () => {\n      clearInterval(timer1);\n    };\n  }, []);\n\n  async function mint() {\n    notification.open({\n      message: 'Notification Title',\n      description: 'This is the content of the notification. This is the content of the notification. This is the content of the notification.',\n      onClick: () => {\n        console.log('Notification Clicked!');\n      }\n    });\n    const signer = await Web3Service.getMySigner();\n    let contract = new ethers.Contract(MINT_CONTRACT, TokenMinter.abi, signer);\n    contract.filters.Transfer(user === null || user === void 0 ? void 0 : user.get('ethAddress'));\n    contract.once(\"Transfer\", (source, destination, value) => {\n      console.log(source, destination, value);\n    });\n    var mintRate = await contract.mintRate();\n    var max = await contract.MAX_SUPPLY();\n    let transaction = await contract.safeMint(await signer.getAddress());\n    let tx = await transaction.wait();\n\n    if (tx) {\n      debugger;\n      alert();\n    }\n\n    console.log(tx);\n    console.log(`total supply ${await contract.totalSupply()} / from ${max} . Mint rate ${ethers.utils.formatUnits(mintRate, 'ether')} eth`);\n  }\n\n  const alert = () => /*#__PURE__*/_jsxDEV(Alert, {\n    message: \"Minted\",\n    type: \"success\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 24\n  }, this);\n\n  const Web3Service = {\n    getMySigner: async function () {\n      const web3Modal = new Web3Modal();\n      const connection = await web3Modal.connect();\n      const provider = new ethers.providers.Web3Provider(connection);\n      return provider.getSigner();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"font-bold p-4 mt-4 bg-pink-500 text-white rounded  shadow-lg\",\n      onClick: mint,\n      children: \" MINT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"MINTER\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Minter, \"i0UJCOSEOpgO6oyo4Z5YyKn8eBA=\", false, function () {\n  return [useMoralis];\n});\n\n_c = Minter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Minter\");","map":{"version":3,"sources":["/Users/macbook/git-public/evils-moralis/src/components/Minter/minter.tsx"],"names":["React","ethers","Web3Modal","Alert","MINT_CONTRACT","TokenMinter","useMoralis","notification","Minter","user","useEffect","timer1","setInterval","signer","Web3Service","getMySigner","contract","Contract","abi","console","log","totalSupply","clearInterval","mint","open","message","description","onClick","filters","Transfer","get","once","source","destination","value","mintRate","max","MAX_SUPPLY","transaction","safeMint","getAddress","tx","wait","alert","utils","formatUnits","web3Modal","connection","connect","provider","providers","Web3Provider","getSigner"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\nimport { ethers } from 'ethers'\nimport Web3Modal from 'web3modal'\nimport { Alert } from 'antd';\nimport {\n    MINT_CONTRACT\n} from '../../../config.js'\n\nimport TokenMinter from '../../../artifacts/contracts/TokenMinter.sol/TokenMinter.json'\nimport { useMoralis } from 'react-moralis';\nimport { Button, notification } from 'antd';\nexport const Minter = () => {\n    const { user } = useMoralis();\n    \n    React.useEffect(\n         () => {\n            let timer1 = setInterval(async () => {\n                const signer = await Web3Service.getMySigner()\n                let contract = new ethers.Contract(MINT_CONTRACT, TokenMinter.abi, signer);\n                console.log(`total supply ${await contract.totalSupply()}`)\n            }, 1 * 1000);\n\n            return () => {\n                clearInterval(timer1);\n            };\n        }, []\n    );\n\n    async function mint() {\n        notification.open({\n            message: 'Notification Title',\n            description:\n              'This is the content of the notification. This is the content of the notification. This is the content of the notification.',\n            onClick: () => {\n              console.log('Notification Clicked!');\n            },\n          });\n        const signer = await Web3Service.getMySigner()\n        let contract = new ethers.Contract(MINT_CONTRACT, TokenMinter.abi, signer);\n        contract.filters.Transfer(user?.get('ethAddress'));\n        contract.once(\"Transfer\", (source, destination, value) => {\n            console.log(source, destination, value);\n        });\n\n\n        var mintRate = await contract.mintRate();\n        var max = await contract.MAX_SUPPLY();\n\n        let transaction = await contract.safeMint(await signer.getAddress())\n\n        let tx = await transaction.wait();\n        if(tx){\n            debugger;\n            alert();\n        }\n        console.log(tx)\n\n        console.log(`total supply ${await contract.totalSupply()} / from ${max} . Mint rate ${ethers.utils.formatUnits(mintRate, 'ether')} eth`)\n    }\n\n\n    const alert= ()=>  <Alert message=\"Minted\" type=\"success\" />;\n    const Web3Service = {\n        getMySigner: async function () {\n            const web3Modal = new Web3Modal()\n            const connection = await web3Modal.connect()\n            const provider = new ethers.providers.Web3Provider(connection)\n            return provider.getSigner()\n        }\n    };\n\n    return (\n        <div className='text-center'>\n            <button className=\"font-bold p-4 mt-4 bg-pink-500 text-white rounded  shadow-lg\" onClick={mint}> MINT</button>\n\n            <h2>MINTER</h2>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}